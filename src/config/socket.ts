import { Server } from "socket.io";
import { FastifyInstance } from "fastify";
import { Server as HTTPServer } from "http";
import { verifyId, verifyToken } from "../utils/jwt";

interface SocketUser {
  userId: string;
  socketId: string;
}

// Armazenamento de usu√°rios conectados
const connectedUsers: Map<string, SocketUser> = new Map();

// Inst√¢ncia global do Socket.IO
let io: Server;

export const initialize = (fastify: FastifyInstance) => {
  const httpServer = fastify.server as HTTPServer;
  io = new Server(httpServer, {
    cors: {
      origin: "*",
      methods: ["GET", "POST"],
      credentials: true,
    },
    path: "/socket.io",
  });

  // Middleware de autentica√ß√£o
  io.use(async (socket, next) => {
    try {
      const token = socket.handshake.auth.token;
      if (!token) {
        console.log("‚ùå Token n√£o fornecido");
        return next(new Error("Authentication error"));
      }

      const decoded = verifyToken(token) as { userId: string };

      console.log("ID decoded:" + decoded);
      if (!decoded || !decoded.userId) {
        console.log("‚ùå Token inv√°lido ou sem userId");
        return next(new Error("Authentication error"));
      }

      const user = await verifyId(decoded.userId);
      if (!user) {
        console.log(`‚ùå Usu√°rio ${decoded.userId} n√£o encontrado`);
        return next(new Error("Authentication error"));
      }

      console.log(`‚úÖ Usu√°rio ${user.id} autenticado com sucesso`);

      // Definir o userId no socket.data
      socket.data = {
        ...socket.data,
        userId: user.id,
      };
      console.log("Dados de auth: " + JSON.stringify(socket.data));

      // Adicionar o usu√°rio √† lista de conectados
      connectedUsers.set(user.id, {
        userId: user.id,
        socketId: socket.id,
      });

      next();
    } catch (error) {
      console.error("‚ùå Erro na autentica√ß√£o do socket:", error);
      next(new Error("Authentication error"));
    }
  });

  io.on("connection", (socket) => {
    console.log(`üö™ Usu√°rio ${socket.id} conectado`);

    // Evento de desconex√£o
    socket.on("disconnect", () => {
      console.log(`üö™ Usu√°rio ${socket.id} desconectado`);
    });
  });

  return io;
};

// Exporta a inst√¢ncia do Socket.IO
export const getIO = () => {
  if (!io) {
    throw new Error("Socket.IO n√£o foi inicializado");
  }
  return io;
};
